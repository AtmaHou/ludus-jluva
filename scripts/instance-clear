#!/usr/bin/env python

import re
import os
import glob
import shutil
import logging
import argparse

SCRIPT_PATH = os.path.realpath(__file__)
ROOT_DIR = os.path.join(os.path.dirname(SCRIPT_PATH), "..")

parser = argparse.ArgumentParser(
    description="remove every file or directory in the instance "
                "except those specified in .rmignore",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
)
parser.add_argument("instance")
parser.add_argument("--instances-dir", default=os.path.join(ROOT_DIR, "instances"))
parser.add_argument("-y", "--yes", action="store_true", default=False,
                    help="bypass any confirmation prompts")

def rmrf(path):
    logging.info(f"forcefully removing everything at {path}...")
    if not os.path.exists(path):
        return
    if os.path.isdir(path):
        shutil.rmtree(path)
    else:
        os.remove(path)
        

def load_ignores(path):
    with open(path, "r") as f:
        lines = [line.strip() for line in f]
    lines = [line.split("#")[0].strip() for line in lines]
    return set(line for line in lines if line)
    
    
def list_filenames(path):
    paths = glob.glob(os.path.join(path, "*"))
    paths = [os.path.basename(p) for p in paths]
    return set(paths)


def get_nonignorables(filenames, ignores):
    for ignore in ignores:
        filenames = [filename for filename in filenames if not re.match(ignore, filename)]
    return set(filenames)


def clearun(args):
    instance_path = os.path.join(args.instances_dir, args.instance)
    assert os.path.exists(instance_path), \
        f"instance '{args.instance}' does not exist"
    ignore_path = os.path.join(instance_path, ".rmignore")
    if os.path.exists(ignore_path):
        ignores = load_ignores(ignore_path)
    else:
        ignores = []
    filenames = list_filenames(instance_path)
    nonignorables = get_nonignorables(filenames, ignores)
    if not args.yes and nonignorables:
        print(f"About to delete {len(nonignorables)} files/directories.")
        while True:
            resp = input("Continue? (y/[n]): ").strip().lower()
            if not resp:
                resp = "n"
            if resp not in "yn":
                print("Answer 'y' or 'n'.")
                continue
            break
                
        if resp == "n":
            print("Aborted.")
            exit()

    for filename in nonignorables:
        rmrf(os.path.join(instance_path, filename))

if __name__ == "__main__":
    logging.basicConfig(level=0)
    clearun(parser.parse_args())
