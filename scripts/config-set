#!/usr/bin/env python

import os
import sys
import yaml
import argparse

SCRIPT_PATH = os.path.realpath(__file__)
ROOT_DIR = os.path.join(os.path.dirname(SCRIPT_PATH), "..")


parser = argparse.ArgumentParser(
    description="set value of a particular key in the specificied config file",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
)
parser.add_argument("instance")
parser.add_argument("config", 
                    help="name of the config file without 'yml' extension: i.e. 'train'")
parser.add_argument("key")
parser.add_argument("value")
parser.add_argument("--type", default="str", help="intended data type of the value",
                    choices=["int", "str", "float", "null"])
parser.add_argument("--instances-dir", default=os.path.join(ROOT_DIR, "instances"),
                    help="directory where all instances reside")
parser.add_argument("-w", "--write-back", action="store_true", default=False)


def null_type(x):
    return None
    
    
def set_keyval(dic, key, newval):
    """nested key"""
    if "." not in key:
        return {k: v if k != key else newval for k, v in dic.items()}
    tokens = key.split(".")
    head, tail = tokens[0], ".".join(tokens[1:])
    return {k: v if k != head else set_keyval(v, tail, newval) for k, v in dic.items()}
    
    
def write_config(args):
    typemap = {
        "int": int,
        "str": str,
        "float": float,
        "null": null_type
    }
    config_path = os.path.join(args.instances_dir, args.instance, f"{args.config}.yml")
    with open(config_path, "r") as f:
        cfg = yaml.load(f)
    cast = typemap[args.type]
    cfg = set_keyval(cfg, args.key, cast(args.value))
    if args.write_back:
        f = open(config_path, "w")
    else:
        f = sys.stdout
    yaml.dump(cfg, f, default_flow_style=False, indent=2)
    f.close()


if __name__ == "__main__":
    write_config(parser.parse_args())    
